/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.53
 * Generated at: 2021-11-24 06:57:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import classes.*;

public final class write_005f1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("classes");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");
      out.write("\n");
      out.write("\n");
      classes.BbsArticle article = null;
      synchronized (session) {
        article = (classes.BbsArticle) _jspx_page_context.getAttribute("article", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (article == null){
          article = new classes.BbsArticle();
          _jspx_page_context.setAttribute("article", article, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\n');
      out.write('\n');

String strAuthor = "";
Cookie[] aryCoo = request.getCookies();
for(int i=0; i<aryCoo.length; i++) {
	if(aryCoo[i].getName().equals("author")) {
		strAuthor = java.net.URLDecoder.decode(aryCoo[i].getValue(),"UTF-8");
	}
}

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("	<head>\n");
      out.write("	  <meta charset=\"UTF-8\">\n");
      out.write("	  <title>掲示板</title>\n");
      out.write("\n");
      out.write("		<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\n");
      out.write("		  integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin=\"anonymous\"></script>\n");
      out.write("		<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n");
      out.write("		  integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script>\n");
      out.write("		<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n");
      out.write("		  integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script>\n");
      out.write("		<script src=\"");
      out.print(request.getContextPath() );
      out.write("/js/main.js\"></script>\n");
      out.write("		\n");
      out.write("		<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n");
      out.write("		  integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n");
      out.write("		  crossorigin=\"anonymous\">\n");
      out.write("		<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/style.css\">\n");
      out.write("\n");
      out.write("\n");
      out.write("	  <script type=\"text/javascript\">\n");
      out.write("	  function f_check() {\n");
      out.write("		  if(document.form1.author.value == \"\") {\n");
      out.write("			  alert(\"名前を入力してください\");\n");
      out.write("			  return false;\n");
      out.write("		  }\n");
      out.write("		  /*\n");
      out.write("		  if(document.form1.subject.value == \"\") {\n");
      out.write("			  alert(\"件名を入力してください\");\n");
      out.write("			  return false;\n");
      out.write("		  }\n");
      out.write("		  if(document.form1.password.value == \"\") {\n");
      out.write("			  alert(\"パスワードを入力してください\");\n");
      out.write("		    return false;\n");
      out.write("		  }\n");
      out.write("		  */\n");
      out.write("		  if(document.form1.password.value != document.form1.password_cfm.value) {\n");
      out.write("	      alert(\"確認用のパスワードと一致しません\");\n");
      out.write("	      return false;\n");
      out.write("	    }\n");
      out.write("	  } \n");
      out.write("	  </script>\n");
      out.write("	</head>\n");
      out.write("	<body>\n");
      out.write("	  <div class=\"container\">\n");
      out.write("		  <h2 class=\"mt-4 font-weight-bold\">【掲示板】</h2>\n");
      out.write("		  <hr/>\n");
      out.write("		  ");

		  String strParentId = request.getParameter("parent_id");
		  if(strParentId != null) {
			  int intParentId = Integer.parseInt(strParentId);
			  article.setParentId(intParentId);
			  String strParentSubject = article.getParentSubject();
			  if(strParentSubject.startsWith("RE:")) {
				  article.setSubject(strParentSubject);
			  } else {
				  article.setSubject("RE:" + strParentSubject);
			  }
		  } else {
			  article.setParentId(0);
			  article.setSubject("");
		  }
		  
      out.write("\n");
      out.write("		  <form name=\"form1\" method=\"POST\" action=\"write_2.jsp\" onsubmit=\"return f_check()\">\n");
      out.write("			  <div style=\"margin-top: 17px;\">\n");
      out.write("			   <p style=\"margin-bottom: 5px;\">名前：　</p>\n");
      out.write("			   <input type=\"text\" name=\"author\" size=\"25\" class=\"w-25\" value=\"");
      out.print( strAuthor );
      out.write("\">\n");
      out.write("			  </div>\n");
      out.write("			  <div style=\"margin-top: 15px;\">\n");
      out.write("			   <p style=\"margin-bottom: 5px;\">件名：　</p>\n");
      out.write("			   <input type=\"text\" name=\"subject\" size=\"50\" class=\"w-25\" value=\"");
      out.print( article.getSubject() );
      out.write("\">\n");
      out.write("			  </div>\n");
      out.write("			  <div style=\"margin-top: 15px;\">\n");
      out.write("			   <p style=\"margin-bottom: 5px;\">本文：　</p>\n");
      out.write("			   <textarea cols=\"60\" rows=\"5\" name=\"body\" maxlength=\"250\"></textarea>\n");
      out.write("			  </div>\n");
      out.write("			  <div style=\"margin-top: 17px;\">\n");
      out.write("			   <p style=\"margin-bottom: 0px;\">パスワード</p>\n");
      out.write("			   <input type=\"password\" name=\"password\" size=\"20\">\n");
      out.write("			   <span style=\"color: red; font-size: 10px;\">(※パスワードは、記事を編集/削除するときに使います。)</span>\n");
      out.write("			  </div>\n");
      out.write("			  <div>\n");
      out.write("		     <p style=\"margin-top: 8px; margin-bottom: 0px;\">確認用パスワード</p>\n");
      out.write("		     <input type=\"password\" name=\"password_cfm\" size=\"20\">\n");
      out.write("		    </div>\n");
      out.write("			  <div style=\"margin-top: 17px;\">\n");
      out.write("			   <input type=\"submit\" value=\"送信\" class=\"btn btn-secondary btn-sm border border-dark\">\n");
      out.write("			  </div>\n");
      out.write("		  </form>\n");
      out.write("		  <div style=\"margin-top: 18px;\">\n");
      out.write("		    <a href=\"javascript:history.back()\" style=\"text-decoration: underline;\">戻る</a>\n");
      out.write("		  </div>\n");
      out.write("	  </div>\n");
      out.write("	</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
